

# 1行でlogを5件表示
git log --oneline -5


# 追加したファイルを全部追加
git add .


# ブランチ作成と切り替え（★はブランチ名）
git checkout -b ★


# リモートブランチをローカルにチェックアウト
git checkout -b ★ origin/★


# ブランチ切り替え(★はブランチ名)
git checkout ★


# ブランチ表示
git branch
git branch origin/master
git branch origin/dev
git branch -a


# ブランチ削除（★はブランチ名）
git branch -D ★


# リモートブランチ削除（★はブランチ名）（ローカルで削除→リモートに反映）
git branch -D ★
git push origin :★
git push --delete origin ★　←これでも行けるかも


# ★のリビジョンまで戻す
git reset --hard ★


# 戻しちゃったリビジョンを更に★まで戻す（間違ったリビジョンまで戻しちゃった時はreflogで消す前の履歴を見て、更にresetすることでresetする前のリビジョンに戻すことができる）
git reflog -n 4
git reset --hard ★


# コンフリクトが起きて解消しようとしたけどこんがらがって中止したくなった場合の対処法
git reset --hard ORIG_HEAD


# ★～◆のリビジョンの差分ファイルを出力する
git diff ★..◆ --name-only | git checkout-index --prefix=./sabun/ --stdin


# リモートのタグを削除する
git push --delete origin refs/tags/★


#　タグを付ける
git tag ★


#　タグを付ける（過去のコミットに）
git tag タグ名 リビジョン名


# 変更を退避させる
git stash


# 退避させた変更を見る
git stash list


# 退避させた変更を復活させる
git stash pop
git stash pop stash@{0}

# リベースの手順

	マージ元のブランチへ移動
	git checkout ★

	マージ先(この例だとmaster)を指定してリベースする
	git rebase master

	→コンフリクトしたら

		リベースの取り消しする場合
		git rebase --abort
	
		コンフリクトを解決した場合（これをやるとリベースが続行する。更にコンフリクトしたら解決してから再度このコマンドで続行する）
		git rebase --continue

	コンフリクトしなかったら（コンフリクトを解決したら）マージ先のブランチへ移動
	git checkout master

	マージ元（★）→マージ先（master）へ、マージコマンドでfast-forwardマージする
	git merge ★

